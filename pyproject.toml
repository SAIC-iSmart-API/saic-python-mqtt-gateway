[project]
name = "saic-python-mqtt-gateway"
version = "0.9.8"
description = "A service that queries the data from an MG iSMART account and publishes the data over MQTT and to other sources"
authors = [
    { name = "Giovanni Condello", email = "saic-python-client@nanomad.net" }
]
license = "MIT"
readme = "README.md"

classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

requires-python = '>=3.12,<4.0'
dependencies = [
    "saic-ismart-client-ng (>=0.9.1,<0.10.0)",
    'httpx (>=0.28.1,<0.29.0)',
    'gmqtt (>=0.7.0,<0.8.0)',
    'inflection (>=0.5.1,<0.6.0)',
    'apscheduler (>=3.11.0,<4.0.0)',
]

[project.urls]
Homepage = "https://github.com/SAIC-iSmart-API/saic-python-mqtt-gateway"
Issues = "https://github.com/SAIC-iSmart-API/saic-python-mqtt-gateway/issues"

[tool.poetry]
package-mode = false
requires-poetry = '>=2.0,<3.0'

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
mock = "^5.1.0"
coverage = "^7.5.4"
ruff = "^0.11.12"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.25.2"
pytest-mock = "^3.14.0"
mypy = "^1.15.0"
pylint = "^3.3.6"

[tool.poetry.dependencies]
saic-ismart-client-ng = { develop = true }

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = ".git build dist"
testpaths = "tests"
pythonpath = [
    "src",
    "tests"
]
mock_use_standalone_module = true
addopts = [
    "--import-mode=importlib",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
omit = [
    "tests/*",
]
branch = true
command_line = "-m pytest"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',
    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]
ignore_errors = true

[tool.ruff]
include = [
    "src/**/*.py",
    "tests/**/*.py",
    "**/pyproject.toml"
]
[tool.ruff.lint]
select = ["ALL"]

ignore = [
    "ANN401", # Opinioated warning on disallowing dynamically typed expressions
    "D203", # Conflicts with other rules
    "D213", # Conflicts with other rules
    "EM101", # raw-string-in-exception

    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "E501", # line too long

    "FBT", # flake8-boolean-trap

    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable

    # Used to map JSON responses
    "N815",
    # Conflicts with the Ruff formatter
    "COM812",
    # We use Exception istead of Error
    "N818",
    # Remove later
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D106", # Missing docstring in public nested class
    "TD", # Todos
    "A", # bultins
    "DTZ", # use tz need to test it first
    "TRY", # tryceratops
    "FIX002", # Line contains TODO, consider resolving the issue
    "BLE001", # Do not catch blind exception: `Exception`,
    "PLR0913", # Too many arguments in function definition
    "ERA001", # Commented-out code
    "PLR0912", # Logging statement uses f-string
    "G004", # Logging statement uses f-string
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false


[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
required-imports = ["from __future__ import annotations"]


[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D100", # Missing docstring in public module
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "N802", # Function name {name} should be lowercase
    "N816", # Variable {name} in global scope should not be mixedCase
    "S101", # Use of assert detected
    "SLF001", # Private member accessed: {access}
    "T201", # print found
]

[tool.ruff.lint.mccabe]
max-complexity = 13

[tool.ruff.lint.pylint]
max-args = 10

[tool.mypy]
files = ["./src", "./tests"]
python_version = 3.12
show_error_codes = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true
strict = true

[[tool.mypy.overrides]]
module = ["apscheduler.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["gmqtt.*"]
ignore_missing_imports = true
follow_untyped_imports = true

[[tool.mypy.overrides]]
module = ["publisher.mqtt_publisher"]
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = ["configuration.argparse_extensions"]
disable_error_code = ["arg-type"]